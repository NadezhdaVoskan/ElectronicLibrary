// <auto-generated />
using System;
using ElectronicLibraryAPI2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectronicLibraryAPI2.Migrations
{
    [DbContext(typeof(Library_DatabaseContext))]
    partial class Library_DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Author");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthor"), 1L, 1);

                    b.Property<bool?>("Deleted_Author")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Author");

                    b.Property<string>("FirstNameAuthor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("First_Name_Author");

                    b.Property<string>("MiddleNameAuthor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Middle_Name_Author")
                        .HasDefaultValueSql("('-')");

                    b.Property<string>("SecondNameAuthor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Second_Name_Author");

                    b.HasKey("IdAuthor");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.AuthorView", b =>
                {
                    b.Property<int>("IdAuthorView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Author_View");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAuthorView"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Author_ID");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<bool?>("Deleted_Author_View")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Author_View");

                    b.HasKey("IdAuthorView");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("Author_View", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Basket", b =>
                {
                    b.Property<int>("IdBasket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Basket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBasket"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,0)");

                    b.Property<bool?>("Deleted_Basket")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Basket");

                    b.Property<int?>("PromocodeId")
                        .HasColumnType("int")
                        .HasColumnName("Promocode_ID");

                    b.Property<int?>("RiderTicketId")
                        .HasColumnType("int")
                        .HasColumnName("Rider_Ticket_ID");

                    b.HasKey("IdBasket");

                    b.ToTable("Basket", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Book");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBook"), 1L, 1);

                    b.Property<string>("BriefPlot")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Brief_Plot");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Cover_Photo");

                    b.Property<bool?>("Deleted_Book")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Book");

                    b.Property<string>("FormatFB2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FormatFB2");

                    b.Property<string>("FormatTXT")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FormatTXT");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Book");

                    b.Property<int?>("NumberPages")
                        .HasColumnType("int")
                        .HasColumnName("Number_Pages");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(38,2)")
                        .HasDefaultValueSql("((0.0))");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("date")
                        .HasColumnName("Publication_Date");

                    b.HasKey("IdBook")
                        .HasName("PK_Product");

                    b.HasIndex(new[] { "NameBook" }, "UQ_Name_Product")
                        .IsUnique();

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.BookList", b =>
                {
                    b.Property<string>("Автор")
                        .HasMaxLength(92)
                        .IsUnicode(false)
                        .HasColumnType("varchar(92)");

                    b.Property<DateTime>("ГодПубликации")
                        .HasColumnType("date")
                        .HasColumnName("Год публикации");

                    b.Property<string>("Жанр")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Издатель")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("КоличествоСтраниц")
                        .HasColumnType("int")
                        .HasColumnName("Количество страниц");

                    b.Property<string>("КраткийСюжет")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Краткий сюжет");

                    b.Property<string>("Название")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ТипЛитературы")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Тип литературы");

                    b.Property<string>("ФотоОбложки")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Фото обложки");

                    b.Property<decimal?>("Цена")
                        .HasColumnType("decimal(38,2)");

                    b.ToView("Book_List");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Card", b =>
                {
                    b.Property<int>("IdCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Card");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCard"), 1L, 1);

                    b.Property<string>("CardHolder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Card_Holder");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Card_Number");

                    b.Property<string>("CvcCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CVC_Code");

                    b.Property<bool?>("Deleted_Card")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Card");

                    b.Property<string>("Validity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCard");

                    b.HasIndex(new[] { "CardNumber" }, "UQ_Card_Number")
                        .IsUnique();

                    b.ToTable("Card", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Feedback");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFeedback"), 1L, 1);

                    b.Property<bool?>("Done")
                        .HasColumnType("bit")
                        .HasColumnName("Done");

                    b.Property<string>("EmailUserMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EmailUserMessage");

                    b.Property<string>("Message")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("NameUserMessage")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("NameUserMessage");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("IdFeedback")
                        .HasName("PK_Feedback");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Genre", b =>
                {
                    b.Property<int>("IdGenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Genre");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenre"), 1L, 1);

                    b.Property<bool?>("Deleted_Genre")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Genre");

                    b.Property<string>("NameGenre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Genre");

                    b.HasKey("IdGenre");

                    b.HasIndex(new[] { "NameGenre" }, "UQ_Name_Genre")
                        .IsUnique();

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.GenreView", b =>
                {
                    b.Property<int>("IdGenreView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Genre_View");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenreView"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<bool?>("Deleted_Genre_View")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Genre_View");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_ID");

                    b.HasKey("IdGenreView");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("Genre_View", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.IssueProduct", b =>
                {
                    b.Property<int>("IdIssueProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Issue_Product");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIssueProduct"), 1L, 1);

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<decimal?>("CostIssueFix")
                        .HasColumnType("decimal(38,2)")
                        .HasColumnName("Cost_Issue_Fix");

                    b.Property<DateTime?>("DateIssue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("Date_Issue")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Deleted_Issue_Product")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Issue_Product");

                    b.Property<int?>("RiderTicketId")
                        .HasColumnType("int")
                        .HasColumnName("Rider_Ticket_ID");

                    b.HasKey("IdIssueProduct");

                    b.HasIndex("BookId");

                    b.HasIndex(new[] { "Barcode" }, "UQ_Barcode")
                        .IsUnique();

                    b.ToTable("Issue_Product", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Logging", b =>
                {
                    b.Property<int>("IdLogging")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Logging");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLogging"), 1L, 1);

                    b.Property<decimal>("CostIssue")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("Cost_Issue");

                    b.Property<DateTime>("DateForm")
                        .HasColumnType("date")
                        .HasColumnName("Date_Form");

                    b.Property<int?>("IssueProductId")
                        .HasColumnType("int")
                        .HasColumnName("Issue_Product_ID");

                    b.Property<int?>("RiderTicketId")
                        .HasColumnType("int")
                        .HasColumnName("Rider_Ticket_ID");

                    b.Property<int?>("StatusLoggingId")
                        .HasColumnType("int")
                        .HasColumnName("Status_Logging_ID");

                    b.Property<TimeSpan>("TimeNotes")
                        .HasColumnType("time")
                        .HasColumnName("Time_Notes");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("IdLogging")
                        .HasName("PK_Log");

                    b.ToTable("Logging", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Promocode", b =>
                {
                    b.Property<int>("IdPromocode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Promocode");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPromocode"), 1L, 1);

                    b.Property<bool?>("Deleted_Promocode")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Promocode");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("NamePromocode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Promocode");

                    b.HasKey("IdPromocode");

                    b.HasIndex(new[] { "NamePromocode" }, "UQ_Name_Promocode")
                        .IsUnique();

                    b.ToTable("Promocode", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Publisher", b =>
                {
                    b.Property<int>("IdPublisher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Publisher");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPublisher"), 1L, 1);

                    b.Property<bool?>("Deleted_Publisher")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Publisher");

                    b.Property<string>("NamePublisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Publisher");

                    b.HasKey("IdPublisher");

                    b.HasIndex(new[] { "NamePublisher" }, "UQ_ Name_Publisher")
                        .IsUnique();

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.PublisherView", b =>
                {
                    b.Property<int>("IdPublisherView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Publisher_View");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPublisherView"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<bool?>("Deleted_Publisher_View")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Publisher_View");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("Publisher_ID");

                    b.HasKey("IdPublisherView");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Publisher_View", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.ReadTicketList", b =>
                {
                    b.Property<string>("ВыдачаТовара")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Выдача товара");

                    b.Property<string>("ДанныеОКлиенте")
                        .HasMaxLength(417)
                        .IsUnicode(false)
                        .HasColumnType("varchar(417)")
                        .HasColumnName("Данные о клиенте");

                    b.Property<string>("УникальныйНомер")
                        .IsRequired()
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)")
                        .HasColumnName("Уникальный номер");

                    b.ToView("Read_Ticket_List");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.ReturnBook", b =>
                {
                    b.Property<int>("IdReturnBook")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_ReturnBook");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReturnBook"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<bool>("DeletedReturn")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Return");

                    b.Property<string>("EmailUserForReturn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EmailUserForReturn");

                    b.Property<string>("NameUserForReturn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameUserForReturn");

                    b.Property<string>("ReasonNoAgree")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reason_No_Agree");

                    b.Property<string>("ReasonReturn")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReasonReturn");

                    b.Property<bool?>("ReturnAgree")
                        .HasColumnType("bit")
                        .HasColumnName("Return_Agree");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("IdReturnBook");

                    b.HasIndex("BookId");

                    b.ToTable("ReturnBook", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.RiderTicket", b =>
                {
                    b.Property<int?>("IdRiderTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Rider_Ticket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("IdRiderTicket"), 1L, 1);

                    b.Property<DateTime>("DateTerm")
                        .HasColumnType("date")
                        .HasColumnName("Date_Term");

                    b.Property<bool?>("Deleted_Rider_Ticket")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Rider_Ticket");

                    b.Property<string>("NumberRiderTicket")
                        .IsRequired()
                        .HasMaxLength(21)
                        .IsUnicode(false)
                        .HasColumnType("varchar(21)")
                        .HasColumnName("Number_Rider_Ticket");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.HasKey("IdRiderTicket");

                    b.ToTable("Rider_Ticket", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Role");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"), 1L, 1);

                    b.Property<bool?>("Deleted_Role")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Role");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Role");

                    b.HasKey("IdRole");

                    b.HasIndex(new[] { "NameRole" }, "UQ_Name_Role")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.StatusLogging", b =>
                {
                    b.Property<int>("IdStatusLogging")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Status_Logging");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatusLogging"), 1L, 1);

                    b.Property<string>("StatusLogName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Status_Log_name");

                    b.HasKey("IdStatusLogging");

                    b.ToTable("Status_Logging", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.TypeLiterature", b =>
                {
                    b.Property<int>("IdTypeLiterature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Type_Literature");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeLiterature"), 1L, 1);

                    b.Property<bool?>("Deleted_Type_Literature")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Type_Literature");

                    b.Property<string>("NameTypeLiterature")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Name_Type_Literature");

                    b.HasKey("IdTypeLiterature")
                        .HasName("PK_ Literature");

                    b.HasIndex(new[] { "NameTypeLiterature" }, "UQ_Name_Type_Literature")
                        .IsUnique();

                    b.ToTable("Type_Literature", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.TypeLiteratureView", b =>
                {
                    b.Property<int>("IdTypeLiteratureView")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_Type_Literature_View");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeLiteratureView"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Book_ID");

                    b.Property<bool?>("Deleted_Type_Literature_View")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_Type_Literature_View");

                    b.Property<int?>("TypeLiteratureId")
                        .HasColumnType("int")
                        .HasColumnName("Type_Literature_ID");

                    b.HasKey("IdTypeLiteratureView");

                    b.HasIndex("BookId");

                    b.HasIndex("TypeLiteratureId");

                    b.ToTable("Type_Literature_View", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID_User");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("Birth_Date");

                    b.Property<int?>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("Card_ID");

                    b.Property<bool?>("Deleted_User")
                        .HasColumnType("bit")
                        .HasColumnName("Deleted_User");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("First_Name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("MiddleName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Middle_Name")
                        .HasDefaultValueSql("('-')");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Passport_Number");

                    b.Property<string>("PassportSeries")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Passport_Series");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("Role_ID");

                    b.Property<string>("SaltPassword")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Salt_Password");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Second_Name");

                    b.HasKey("IdUser");

                    b.HasIndex(new[] { "Login" }, "UQ_Login")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.AuthorView", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ElectronicLibraryAPI2.Models.Book", "Book")
                        .WithMany("AuthorView")
                        .HasForeignKey("BookId");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.GenreView", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Book", "Book")
                        .WithMany("GenreView")
                        .HasForeignKey("BookId");

                    b.HasOne("ElectronicLibraryAPI2.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.IssueProduct", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.PublisherView", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Book", null)
                        .WithMany("PublisherView")
                        .HasForeignKey("BookId");

                    b.HasOne("ElectronicLibraryAPI2.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.ReturnBook", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.TypeLiteratureView", b =>
                {
                    b.HasOne("ElectronicLibraryAPI2.Models.Book", null)
                        .WithMany("TypeLiteratureView")
                        .HasForeignKey("BookId");

                    b.HasOne("ElectronicLibraryAPI2.Models.TypeLiterature", "TypeLiterature")
                        .WithMany()
                        .HasForeignKey("TypeLiteratureId");

                    b.Navigation("TypeLiterature");
                });

            modelBuilder.Entity("ElectronicLibraryAPI2.Models.Book", b =>
                {
                    b.Navigation("AuthorView");

                    b.Navigation("GenreView");

                    b.Navigation("PublisherView");

                    b.Navigation("TypeLiteratureView");
                });
#pragma warning restore 612, 618
        }
    }
}
